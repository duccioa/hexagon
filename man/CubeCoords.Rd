% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-CubeCoords.R
\name{CubeCoords}
\alias{CubeCoords}
\alias{rotate_left}
\alias{rotate_right}
\title{Cube coordinates class}
\usage{
CubeCoords$new(x)

rotate_left(object)

rotate_right(object)
}
\description{
A class \code{Coords}of cube coordinates. Cube coordinates are specific
for hexagon and are based on three dimensions with the constrain \code{q + r + s = 0}.
The implementation and the notation of this package follow the exaplanation given
in the blog \href{https://www.redblobgames.com/grids/hexagons}{redblobgames}.
To be noted that in the theory page, the notation is \verb{x, y, z} and in the
implementation is \verb{q, r, s} with x -> q, z -> r and y -> s. This package follows
the latter notation.
}
\section{Functions}{
\itemize{
\item \code{rotate_left}: Rotate left method for a cube center.

\item \code{rotate_right}: Rotate right method for a cube center.
}}

\references{
\link{https://www.redblobgames.com/grids/hexagons}
}
\section{Super class}{
\code{\link[hexagon:Coords]{hexagon::Coords}} -> \code{CubeCoords}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{q}}{numeric, the 'q' dimension.}

\item{\code{r}}{numeric, the 'r' dimension.}

\item{\code{s}}{numeric, the 's' dimension.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{CubeCoords$new()}}
\item \href{#method-set}{\code{CubeCoords$set()}}
\item \href{#method-set_q}{\code{CubeCoords$set_q()}}
\item \href{#method-set_r}{\code{CubeCoords$set_r()}}
\item \href{#method-get}{\code{CubeCoords$get()}}
\item \href{#method-shift_along_q}{\code{CubeCoords$shift_along_q()}}
\item \href{#method-shift_along_r}{\code{CubeCoords$shift_along_r()}}
\item \href{#method-shift_along_s}{\code{CubeCoords$shift_along_s()}}
\item \href{#method-clone}{\code{CubeCoords$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="hexagon" data-topic="Coords" data-id="dim">}\href{../../hexagon/html/Coords.html#method-dim}{\code{hexagon::Coords$dim()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="hexagon" data-topic="Coords" data-id="print">}\href{../../hexagon/html/Coords.html#method-print}{\code{hexagon::Coords$print()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialise a new instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CubeCoords$new(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Numeric coordinates of length 3.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An object of class \code{CubeCoords}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set"></a>}}
\if{latex}{\out{\hypertarget{method-set}{}}}
\subsection{Method \code{set()}}{
Set the coordinates value.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CubeCoords$set(x, in_place = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Numeric coordinates of length 3.}

\item{\code{in_place}}{logical. If TRUE the instance is modifed by reference and
cloned otherwise.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_q"></a>}}
\if{latex}{\out{\hypertarget{method-set_q}{}}}
\subsection{Method \code{set_q()}}{
Set the 'q' coordinate value.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CubeCoords$set_q(q, in_place = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{q}}{Numeric coordinate of length 1.}

\item{\code{in_place}}{logical. If TRUE the instance is modifed by reference and
cloned otherwise.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_r"></a>}}
\if{latex}{\out{\hypertarget{method-set_r}{}}}
\subsection{Method \code{set_r()}}{
Set the 'r' coordinate value.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CubeCoords$set_r(r, in_place = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{r}}{Numeric coordinate of length 1.}

\item{\code{in_place}}{logical. If TRUE the instance is modifed by reference and
cloned otherwise.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get"></a>}}
\if{latex}{\out{\hypertarget{method-get}{}}}
\subsection{Method \code{get()}}{
Get coodinate values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CubeCoords$get(y)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{y}}{The index of the dimension to be retrieved or
the name as a string 'q', 'r' or 's'.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric value. As many as \code{NA_real_} as there are indexes
out of boundaries.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-shift_along_q"></a>}}
\if{latex}{\out{\hypertarget{method-shift_along_q}{}}}
\subsection{Method \code{shift_along_q()}}{
Shift \code{i} places along the \code{q} axis.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CubeCoords$shift_along_q(i = 1, in_place = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{i}}{An integer, indicating how many places to shift. The sign determines
the direction along the axis.}

\item{\code{in_place}}{logical. If TRUE the instance is modifed by reference and
cloned otherwise.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-shift_along_r"></a>}}
\if{latex}{\out{\hypertarget{method-shift_along_r}{}}}
\subsection{Method \code{shift_along_r()}}{
Shift \code{i} places along the \code{r} axis.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CubeCoords$shift_along_r(i = 1, in_place = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{i}}{An integer, indicating how many places to shift. The sign determines
the direction along the axis.}

\item{\code{in_place}}{logical. If TRUE the instance is modifed by reference and
cloned otherwise.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-shift_along_s"></a>}}
\if{latex}{\out{\hypertarget{method-shift_along_s}{}}}
\subsection{Method \code{shift_along_s()}}{
Shift \code{i} places along the \code{s} axis.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CubeCoords$shift_along_s(i = 1, in_place = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{i}}{An integer, indicating how many places to shift. The sign determines
the direction along the axis.}

\item{\code{in_place}}{logical. If TRUE the instance is modifed by reference and
cloned otherwise.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CubeCoords$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
